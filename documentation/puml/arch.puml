@startuml

skinparam class {
    BackgroundColor #white
	BackgroundColor<<wip>> LightGoldenRodYellow
	BackgroundColor<<tbd>> Khaki
}

package com.epam.edp.cd {
  class CdPipeline {
    -- metadata --
        String name
    -- spec --
        String name
        []String codebaseBranch
        []String inputDockerStreams
        []String services
        []String applicationsToPromote
    -- status --
        Boolean available
        Date lastTimeUpdated
        String status
        String username
        ActionType action
        Result result
        String detailedMessage
        String value
  }

  CdPipeline "1" -l-* "1..*" Stage : cdPipeline

  class Stage {
    -- metadata --
        String name
    -- spec --
        String name
        String cdPipeline
        String description
        String triggerType
        Integer order
        []QualityGate qualityGates
        Source  Source
        String jobProvisioning
    -- status --
        Boolean available
        Date lastTimeUpdated
        String status
        String username
        ActionType action
        Result result
        String detailedMessage
        String value
  }

  Stage "1" --* "1..*" QualityGate : internal structure
  class QualityGate  {
        String qualityGateType
        String stepName
        String autotestName
        String branchName
  }

  QualityGate --> QualityGateType : qualityGateType
  enum QualityGateType {
        MANUAL
        AUTOTESTS
  }

  Stage --> Source : internal structure
  class Source {
        String type
        Library library
  }
  Source --> SourceType : type
  enum SourceType {
        DEFAULT
        CUSTOM
  }
  Source --> Library : internal structure
  class Library {
        String name
        String branch
  }

  Stage --> Stage : <color red>owner ref next stage</color>

  enum TriggerType {
    MANUAL
    AUTO
  }
  Stage --> TriggerType : triggerType

  class Codebase {
    -- metadata --
        String name
    -- spec --
        String lang
        String description
        String framework
        String buildTool
        Strategy strategy
        Repository repository
        Route route
        String testReportFramework
        String type
        String gitServer
        String gitUrlPath
        String jenkinsSlave
        String jobProvisioning
        String deploymentScript
        Versioning versioning
        String jiraServer
        String commitMessagePattern
        String ticketNamePattern
        String ciTool
        Perf  perf
        String defaultBranch
        String jiraIssueMetadataPayload
        Bool emptyProject
    -- status --
        ActionType action
        Boolean available
        String detailedMessage
        Integer failureCount
        Date lastTimeUpdated
        Result result
        String status
        String username
        String value
  }

  class CodebaseBranch {
    -- metadata --
        String name
    -- spec --
        String branchName
        String codebaseName
        Boolean release
    -- status --
        ActionType action
        Integer build
        String detailedMessage
        Integer failureCount
        Date lastTimeUpdated
        Result result
        String status
        String username
        String value
  }

  class JenkinsFolder {
    -- metadata --
        String name
    -- spec --
        String ownerName
        String codebaseName
        []String job
        String config
    -- status --
        String status
        Boolean available
        Date lastTimeUpdated
        Integer jenkinsJobProvisionBuildNumber
  }

  class JenkinsJob {
    -- metadata --
        String name
    -- spec --
        String jenkinsFolder
        String stageName
        []String job
        String config
        Integer autoTriggerPeriod
    -- status --
        Result result
        String status
        Date lastTimeUpdated
        Integer jenkinsJobProvisionBuildNumber
        Boolean available
        String detailedMessage
        ActionType action
        String username
        String value
  }

  class Service {
    -- metadata --
        String name
    -- spec --
        String description
        String icon
        String url
        String version
  }

  class CDStageDeploy {
    -- metadata --
        String name
    -- spec --
        String pipeline
        String stage
        []String tags
        String codebase
        String tag
  }

  class CDStageJenkinsDeployment {
    -- metadata --
        String name
    -- spec --
        String job
        []String tags
        String codebase
        String tag
  }

class CodebaseImageStream {
    -- metadata --
        String name
    -- spec --
        String codebase
        String imageName
        String tags
  }

JenkinsFolder <-- CdPipeline : "creates"
Service "0..*" o- "0..*" CdPipeline : Services
Codebase "1..*" o--- "1..*" CdPipeline : applicationsToPromote
CodebaseImageStream "1..*" o--- "1..*" CdPipeline : inputDockerStreams
CodebaseBranch "0..1" o--- "1..*" QualityGate : autotestName+branchName
CodebaseBranch "1" o--- "1..*" Library : name+branch
JenkinsJob "1" <-- "1" Stage : creates
CodebaseImageStream "1..*" <-- "1" Stage : creates output stream
CDStageDeploy "1..*" <-- "1" Stage : creates
CDStageJenkinsDeployment "1..*" <-- "1" CDStageDeploy : creates

legend
|<back:LightGoldenRodYellow>    </back>| Work In Progress |
|<back:LightGreen>    </back>| Implemented |
|<back:Khaki>    </back>| TBD |
endlegend


@enduml